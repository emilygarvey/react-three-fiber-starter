{"version":3,"sources":["index.js"],"names":["extend","OrbitControls","Controls","props","useThree","gl","camera","ref","useRef","useFrame","current","update","args","domElement","Sphere","mesh","useState","hovered","setHover","rotation","y","castShadow","onPointerOver","e","onPointerOut","scale","attach","radius","map","material","color","transparent","roughness","metalness","Torus","setTimeout","x","width","doubleSided","Sun","sunTexture","useMemo","TextureLoader","load","postion","Mercury","mercuryTexture","clock","getElapsedTime","position","Venus","venusTexture","Earth","earthTexture","Mars","marsTexture","Jupiter","jupiterTexture","Saturn","saturnTexture","Uranus","uranusTexture","Neptune","neptuneTexture","ReactDOM","render","enablePan","enableZoom","enableDamping","dampingFactor","rotateSpeed","document","getElementById"],"mappings":"8NAMAA,YAAO,CAAEC,oBACT,IAAMC,EAAW,SAACC,GAAW,IAAD,EACHC,cAAfC,EADkB,EAClBA,GAAIC,EADc,EACdA,OACNC,EAAMC,mBAEZ,OADAC,aAAS,kBAAMF,EAAIG,QAAQC,YACpB,iDAAeJ,IAAKA,EAAKK,KAAM,CAACN,EAAQD,EAAGQ,aAAiBV,KAGrE,SAASW,EAAOX,GACd,IAAMY,EAAOP,mBADQ,EAEOQ,oBAAS,GAFhB,mBAEdC,EAFc,KAELC,EAFK,KAIrB,OADAT,aAAS,kBAAOM,EAAKL,QAAQS,SAASC,GAAK,OAEzC,0CACMjB,EADN,CAEEI,IAAKQ,EACLM,YAAU,EACVC,cAAe,SAACC,GAAD,OAAOL,GAAS,IAC/BM,aAAc,SAACD,GAAD,OAAOL,GAAS,IAC9BO,MAAOR,EAAU,CAAC,KAAM,KAAM,MAAQ,CAAC,EAAG,EAAG,KAE7C,oCAAgBS,OAAO,WAAWd,KAAM,CAACT,EAAMwB,OAAQ,IAAK,OAC5D,0CACEC,IAAKzB,EAAM0B,SACXH,OAAO,WACPI,MAAO3B,EAAM2B,MACbC,aAAW,EACXC,UAAW,GACXC,UAAW,MAKnB,SAASC,EAAM/B,GACb,IAAMY,EAAOP,mBADO,EAEQQ,oBAAS,GAFjB,mBAEbC,EAFa,KAEJC,EAFI,KAKpB,OAFAiB,YAAW,WAAQpB,EAAKL,QAAQS,SAASiB,EAAI,KAAM,KACnD3B,aAAS,kBAAOM,EAAKL,QAAQS,SAASC,GAAK,OAEzC,0CACMjB,EADN,CAEEI,IAAKQ,EACLO,cAAe,SAACC,GAAD,OAAOL,GAAS,IAC/BM,aAAc,SAACD,GAAD,OAAOL,GAAS,IAC9BO,MAAOR,EAAU,CAAC,KAAM,KAAM,MAAQ,CAAC,EAAG,EAAG,KAE7C,mCAAeS,OAAO,WAAWd,KAAM,CAAC,EAAGT,EAAMkC,MAAO,IAAK,MAC7D,0CACET,IAAKzB,EAAM0B,SACXH,OAAO,WACPI,MAAO3B,EAAM2B,MACbQ,aAAa,KAKrB,SAASC,IACP,IAAMC,EAAaC,mBAAQ,kBAAM,IAAIC,iBAAgBC,KAAK,aAAY,IACtE,OACE,kBAAC7B,EAAD,CACE8B,QAAS,CAAC,EAAG,EAAG,GAChBjB,OAAQ,EACRE,SAAUW,IAKhB,SAASK,IACP,IAAMC,EAAiBL,mBAAQ,kBAAM,IAAIC,iBAAgBC,KAAK,kBAAiB,IACzEpC,EAAMC,mBAEZ,OADAC,aAAS,gBAAGsC,EAAH,EAAGA,MAAH,OAAgBxC,EAAIG,QAAQS,SAASC,EAA4B,GAAxB2B,EAAMC,oBAEtD,2BAAOzC,IAAKA,GACV,kBAACO,EAAD,CACEmC,SAAU,CAAC,EAAG,GAAK,GACnBpB,SAAUiB,EACVnB,OAAQ,KAMhB,SAASuB,IACP,IAAMC,EAAeV,mBAAQ,kBAAM,IAAIC,iBAAgBC,KAAK,eAAc,IACpEpC,EAAMC,mBAEZ,OADAC,aAAS,gBAAGsC,EAAH,EAAGA,MAAH,OAAgBxC,EAAIG,QAAQS,SAASC,EAA4B,GAAxB2B,EAAMC,oBAEtD,2BAAOzC,IAAKA,GACV,kBAACO,EAAD,CACEmC,SAAU,CAAC,GAAI,GAAK,GACpBpB,SAAUsB,EACVxB,OAAQ,KAMhB,SAASyB,IACP,IAAMC,EAAeZ,mBAAQ,kBAAM,IAAIC,iBAAgBC,KAAK,eAAc,IACpEpC,EAAMC,mBAEZ,OADAC,aAAS,gBAAGsC,EAAH,EAAGA,MAAH,OAAgBxC,EAAIG,QAAQS,SAASC,EAA4B,GAAxB2B,EAAMC,oBAEtD,2BAAOzC,IAAKA,GACV,kBAACO,EAAD,CACEmC,SAAU,CAAC,GAAI,GAAK,GACpBpB,SAAUwB,EACV1B,OAAQ,KAMhB,SAAS2B,IACP,IAAMC,EAAcd,mBAAQ,kBAAM,IAAIC,iBAAgBC,KAAK,eAAc,IACnEpC,EAAMC,mBAEZ,OADAC,aAAS,gBAAGsC,EAAH,EAAGA,MAAH,OAAgBxC,EAAIG,QAAQS,SAASC,EAA4B,GAAxB2B,EAAMC,oBAEtD,2BAAOzC,IAAKA,GACV,kBAACO,EAAD,CACAmC,SAAU,CAAC,GAAI,GAAK,GACpBpB,SAAU0B,EACV5B,OAAQ,KAMd,SAAS6B,IACP,IAAMC,EAAiBhB,mBAAQ,kBAAM,IAAIC,iBAAgBC,KAAK,iBAAgB,IACxEpC,EAAMC,mBAEZ,OADAC,aAAS,gBAAGsC,EAAH,EAAGA,MAAH,OAAgBxC,EAAIG,QAAQS,SAASC,EAA4B,GAAxB2B,EAAMC,oBAEtD,2BAAOzC,IAAKA,GACV,kBAACO,EAAD,CACImC,SAAU,CAAC,GAAI,GAAK,GACpBpB,SAAU4B,EACV9B,OAAQ,IAEV,kBAACO,EAAD,CACEe,SAAU,CAAC,GAAI,GAAK,GACpBpB,SAAU4B,EACVpB,MAAO,MAKjB,SAASqB,IACP,IAAMC,EAAgBlB,mBAAQ,kBAAM,IAAIC,iBAAgBC,KAAK,gBAAe,IACtEpC,EAAMC,mBAEZ,OADAC,aAAS,gBAAGsC,EAAH,EAAGA,MAAH,OAAgBxC,EAAIG,QAAQS,SAASC,EAA4B,IAAxB2B,EAAMC,oBAEtD,2BAAOzC,IAAKA,GACV,kBAACO,EAAD,CACImC,SAAU,CAAC,GAAI,GAAK,GACpBpB,SAAU8B,EACVhC,OAAQ,MAEV,kBAACO,EAAD,CACEe,SAAU,CAAC,GAAI,GAAK,GACpBpB,SAAU8B,EACVtB,MAAO,OAMjB,SAASuB,IACP,IAAMC,EAAgBpB,mBAAQ,kBAAM,IAAIC,iBAAgBC,KAAK,gBAAe,IACtEpC,EAAMC,mBAEZ,OADAC,aAAS,gBAAGsC,EAAH,EAAGA,MAAH,OAAgBxC,EAAIG,QAAQS,SAASC,EAA4B,GAAxB2B,EAAMC,oBAEtD,2BAAOzC,IAAKA,GACV,kBAACO,EAAD,CACAmC,SAAU,CAAC,GAAI,GAAK,GACpBpB,SAAUgC,EACVlC,OAAQ,QAMd,SAASmC,IACP,IAAMC,EAAiBtB,mBAAQ,kBAAM,IAAIC,iBAAgBC,KAAK,iBAAgB,IACxEpC,EAAMC,mBAEZ,OADAC,aAAS,gBAAGsC,EAAH,EAAGA,MAAH,OAAgBxC,EAAIG,QAAQS,SAASC,EAA4B,IAAxB2B,EAAMC,oBAEtD,2BAAOzC,IAAKA,GACV,kBAACO,EAAD,CACAmC,SAAU,CAAC,GAAI,GAAK,GACpBpB,SAAUkC,EACVpC,OAAQ,OAMdqC,IAASC,OACP,kBAAC,IAAD,CAAQ3D,OAAQ,CAAE2C,SAAU,CAAC,EAAG,EAAG,MACjC,kBAAC/C,EAAD,CACEgE,WAAW,EACXC,YAAY,EACZC,eAAa,EACbC,cAAe,GACfC,YAAa,IAEf,uCACA,gCAAYrB,SAAU,CAAC,EAAG,EAAG,KAC7B,kBAACV,EAAD,MACA,kBAACM,EAAD,MACA,kBAACK,EAAD,MACA,kBAACE,EAAD,MACA,kBAACE,EAAD,MACA,kBAACE,EAAD,MACA,kBAACE,EAAD,MACA,kBAACE,EAAD,MACA,kBAACE,EAAD,OAEFS,SAASC,eAAe,W","file":"static/js/main.a6b3d7a7.chunk.js","sourcesContent":["import ReactDOM from 'react-dom'\nimport React, { useEffect, useRef, useState, useMemo } from 'react'\nimport { Canvas, useFrame, setDefaultCamera, useThree, extend, useLoader } from 'react-three-fiber'\nimport { TextureLoader, MeshStandardMaterial } from 'three'\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\n\nextend({ OrbitControls })\nconst Controls = (props) => {\n  const { gl, camera } = useThree()\n  const ref = useRef()\n  useFrame(() => ref.current.update())\n  return <orbitControls ref={ref} args={[camera, gl.domElement]} {...props} />\n}\n\nfunction Sphere(props) {\n  const mesh = useRef()\n  const [hovered, setHover] = useState(false)\n  useFrame(() => (mesh.current.rotation.y += 0.01))\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      castShadow\n      onPointerOver={(e) => setHover(true)}\n      onPointerOut={(e) => setHover(false)}\n      scale={hovered ? [1.25, 1.25, 1.25] : [1, 1, 1]}\n    >\n      <sphereGeometry attach=\"geometry\" args={[props.radius, 100, 100]} />\n      <meshStandardMaterial\n        map={props.material}\n        attach=\"material\"\n        color={props.color}\n        transparent\n        roughness={0.1}\n        metalness={0.1} />\n    </mesh>\n  )\n}\n\nfunction Torus(props) {\n  const mesh = useRef()\n  const [hovered, setHover] = useState(false)\n  setTimeout(() => { mesh.current.rotation.x = 90 }, 1000)\n  useFrame(() => (mesh.current.rotation.y += 0.01))\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n      onPointerOver={(e) => setHover(true)}\n      onPointerOut={(e) => setHover(false)}\n      scale={hovered ? [1.25, 1.25, 1.25] : [1, 1, 1]}\n    >\n      <torusGeometry attach=\"geometry\" args={[3, props.width, 3.5, 64]} />\n      <meshStandardMaterial\n        map={props.material}\n        attach=\"material\"\n        color={props.color}\n        doubleSided={true} />\n    </mesh>\n  )\n}\n\nfunction Sun() {\n  const sunTexture = useMemo(() => new TextureLoader().load('sun.jpg'), []);\n  return (\n    <Sphere \n      postion={[0, 0, 0]} \n      radius={3}\n      material={sunTexture}\n    />\n  )\n}\n\nfunction Mercury() {\n  const mercuryTexture = useMemo(() => new TextureLoader().load('mercury.jpeg'), []);\n  const ref = useRef()\n  useFrame(({ clock }) => (ref.current.rotation.y = clock.getElapsedTime()* 0.3))\n  return (\n    <group ref={ref}>\n      <Sphere \n        position={[5, 0.5, 0 ]}\n        material={mercuryTexture}\n        radius={1}\n      />\n     </group>\n  )\n}\n\nfunction Venus() {\n  const venusTexture = useMemo(() => new TextureLoader().load('venus.jpg'), []);\n  const ref = useRef()\n  useFrame(({ clock }) => (ref.current.rotation.y = clock.getElapsedTime()* 0.2))\n  return (\n    <group ref={ref}>\n      <Sphere \n        position={[10, 0.5, 0 ]}\n        material={venusTexture}\n        radius={1}\n      />\n    </group>\n  )\n}\n\nfunction Earth() {\n  const earthTexture = useMemo(() => new TextureLoader().load('earth.png'), []);\n  const ref = useRef()\n  useFrame(({ clock }) => (ref.current.rotation.y = clock.getElapsedTime()* 0.3))\n  return (\n    <group ref={ref}>\n      <Sphere \n        position={[15, 0.5, 0 ]}\n        material={earthTexture}\n        radius={1}\n      />\n    </group>\n    )\n  }\n\nfunction Mars() {\n  const marsTexture = useMemo(() => new TextureLoader().load('mars.jpeg'), []);\n  const ref = useRef()\n  useFrame(({ clock }) => (ref.current.rotation.y = clock.getElapsedTime()* 0.4))\n  return (\n    <group ref={ref}>\n      <Sphere \n      position={[20, 0.5, 0 ]}\n      material={marsTexture}\n      radius={1}\n     />\n    </group>\n    )\n  }\n\nfunction Jupiter() {\n  const jupiterTexture = useMemo(() => new TextureLoader().load('jupiter.jpg'), []);\n  const ref = useRef()\n  useFrame(({ clock }) => (ref.current.rotation.y = clock.getElapsedTime()* 0.1))\n  return (\n    <group ref={ref}>\n      <Sphere \n          position={[25, 0.5, 0 ]}\n          material={jupiterTexture}\n          radius={2}\n        />\n        <Torus\n          position={[25, 0.5, 0 ]}\n          material={jupiterTexture}\n          width={0.2}\n        />\n    </group>\n  )\n}\nfunction Saturn() {\n  const saturnTexture = useMemo(() => new TextureLoader().load('saturn.jpg'), []);\n  const ref = useRef()\n  useFrame(({ clock }) => (ref.current.rotation.y = clock.getElapsedTime()* 0.15))\n  return (\n    <group ref={ref}>\n      <Sphere \n          position={[30, 0.5, 0 ]}\n          material={saturnTexture}\n          radius={2.5}\n        />\n        <Torus\n          position={[30, 0.5, 0 ]}\n          material={saturnTexture}\n          width={0.45}\n        />\n    </group>\n  )\n}\n\nfunction Uranus() {\n  const uranusTexture = useMemo(() => new TextureLoader().load('uranus.jpg'), []);\n  const ref = useRef()\n  useFrame(({ clock }) => (ref.current.rotation.y = clock.getElapsedTime()* 0.3))\n  return (\n    <group ref={ref}>\n      <Sphere \n      position={[35, 0.5, 0 ]}\n      material={uranusTexture}\n      radius={1.75}\n     />\n    </group>\n    )\n  }\n\nfunction Neptune() {\n  const neptuneTexture = useMemo(() => new TextureLoader().load('neptune.jpg'), []);\n  const ref = useRef()\n  useFrame(({ clock }) => (ref.current.rotation.y = clock.getElapsedTime()* 0.35))\n  return (\n    <group ref={ref}>\n      <Sphere \n      position={[40, 0.5, 0 ]}\n      material={neptuneTexture}\n      radius={2.1}\n      />\n    </group>\n    )\n  }\n\nReactDOM.render(\n  <Canvas camera={{ position: [0, 0, 35] }} >\n    <Controls\n      enablePan={true}\n      enableZoom={true}\n      enableDamping\n      dampingFactor={0.5}\n      rotateSpeed={1}\n    />\n    <ambientLight />\n    <pointLight position={[0, 0, 0]} />\n    <Sun />\n    <Mercury />\n    <Venus />\n    <Earth />\n    <Mars />\n    <Jupiter />\n    <Saturn />\n    <Uranus />\n    <Neptune />\n  </Canvas>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}